Spring Cloud Bus 将分布式系统的节点与轻量级消息代理链接。这可以用于广播状态更改（例如配置更改）或其他管理指令。一个关键的想法是，Bus 就像一个扩展的 Spring Boot 应用程序的分布式执行器，但也可以用作应用程序之间的通信渠道。

—— Spring Cloud Bus 官方解释

-- 参考断路器的图一起理解:
在监视器中，最引人注目的是左上角的图表。折线图代表了指定方法过去两分钟的流量，简要显示了该方法的繁忙情况。折线图的背景是一个大小和颜色会出现波动的圆圈。圆圈的大小表示当前的流量，圆圈越大，流量越大。圆圈的颜色表示它的健康状况：绿色表示健康的断路器，黄色表示偶尔发生故障的断路器，红色表示故障断路器。

在监视器的右上角，以3列的形式显示各种计数器。在最左边的一列中，从上到下，第一个数字（绿色——在本书的电子版中会看出各种颜色）表示当前成功调用的数量，第二个数字（蓝色）表示短路请求的数量，最后一个数字（蓝绿色）表示错误请求的数量。中间一列显示超时请求的数量（黄色）、线程池拒绝的数量（紫色）和失败请求的数量（红色）。第三列显示过去10秒内错误的百分率。

计数器下面有两个数字，代表每秒主机和集群的请求数量。这两个请求率下面是断路器的状态。监视器的底部显示了延迟的中位数和平均值，以及第90、99和99.5百分位的延迟。

------------理解Hystrix的线程模型------------

假设某个方法要耗费大量的时间才能完成其任务。这个方法可能向其他的服务发起了HTTP请求，而该服务响应很慢。在服务响应之前，Hystrix会阻塞线程，等待响应。如果这个方法执行时与调用者在同一个线程上下文中，那么调用者将会一直在这个长时间运行的方法上进行等待。另外，如果被阻塞的线程来自一组数量有限的线程集，比如Tomcat的请求处理线程，而且这种情况一直持续，那么当所有线程耗尽并全部等待响应时，就会影响到可扩展性。

为了避免这种现象，[Hystrix会为每项依赖（比如，带有一个或多个Hystrix命令方法的每个Springbean）指派一个线程池]。当Hystrix命令调用时，它将会在来自Hystrix托管的线程池的某个线程中执行，这样会将其与调用者线程隔离开。如果被调用的方法要执行较长时间，就能够允许调用线程不用一直等待，将潜在的线程耗尽隔离在Hystrix托管的线程池中。

-- 参考hystrix线程模型图理解

与断路器的监视器类似，每个线程池监视器在左上角都含有一个圆圈。圆圈的大小和颜色代表了线程池的活跃状态以及它的健康状况。与断路器的监视器不同的是，线程池的监视器没有显示过去几分钟线程池活动的折线图。右上角显示线程池的名称，其下方是线程池中的线程每秒钟处理请求的数量。线程池监视器的左下角显示如下信息。

